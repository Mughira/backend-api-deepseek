"""Main vulnerability analyzer module."""

import json
from typing import List, Dict, Any, Tuple
from dataclasses import dataclass
from deepseek_client import DeepSeekClient
from colorama import Fore, Style, init

# Initialize colorama for colored output
init(autoreset=True)


@dataclass
class VulnerabilityReport:
    """Data class for vulnerability reports."""
    id: str
    description: str
    severity: str
    category: str
    line_numbers: List[int] = None


@dataclass
class AnalysisResult:
    """Data class for analysis results."""
    vulnerability_id: str
    is_valid: bool
    confidence: str
    explanation: str
    issue_code: str = ""
    fixed_code: str = ""
    recommendations: List[str] = None


class SmartContractVulnerabilityAnalyzer:
    """Main analyzer class for smart contract vulnerabilities."""
    
    def __init__(self):
        self.client = DeepSeekClient()
        self.results = []
    
    def analyze_vulnerabilities(self, vulnerabilities: List[VulnerabilityReport], 
                              contract_code: str) -> List[AnalysisResult]:
        """
        Analyze multiple vulnerability reports against smart contract code.
        
        Args:
            vulnerabilities: List of vulnerability reports to analyze
            contract_code: Smart contract source code
            
        Returns:
            List of analysis results
        """
        results = []
        
        print(f"{Fore.CYAN}Starting analysis of {len(vulnerabilities)} vulnerability reports...{Style.RESET_ALL}")
        print("=" * 60)
        
        for i, vuln in enumerate(vulnerabilities, 1):
            print(f"{Fore.YELLOW}Analyzing vulnerability {i}/{len(vulnerabilities)}: {vuln.id}{Style.RESET_ALL}")
            
            analysis = self.client.analyze_vulnerability(vuln.description, contract_code)
            
            if analysis:
                result = self._process_analysis(vuln.id, analysis)
                results.append(result)
                self._print_result(result)
            else:
                print(f"{Fore.RED}Failed to analyze vulnerability: {vuln.id}{Style.RESET_ALL}")
            
            print("-" * 40)
        
        self.results = results
        return results
    
    def _process_analysis(self, vuln_id: str, analysis: Dict[str, Any]) -> AnalysisResult:
        """Process the API analysis response into a structured result."""
        try:
            return AnalysisResult(
                vulnerability_id=vuln_id,
                is_valid=analysis.get("vulnerability_exists", False),
                confidence=analysis.get("confidence_level", "unknown"),
                explanation=analysis.get("explanation", "No explanation provided"),
                issue_code=analysis.get("issue_code", ""),
                fixed_code=analysis.get("fixed_code", ""),
                recommendations=analysis.get("recommendations", [])
            )
        except Exception as e:
            return AnalysisResult(
                vulnerability_id=vuln_id,
                is_valid=False,
                confidence="low",
                explanation=f"Error processing analysis: {str(e)}",
                issue_code="",
                fixed_code="",
                recommendations=[]
            )
    
    def _print_result(self, result: AnalysisResult):
        """Print analysis result with colored output."""
        status_color = Fore.GREEN if result.is_valid else Fore.RED
        status_text = "VALID" if result.is_valid else "INVALID"
        
        print(f"Vulnerability ID: {result.vulnerability_id}")
        print(f"Status: {status_color}{status_text}{Style.RESET_ALL}")
        print(f"Confidence: {result.confidence}")
        print(f"Explanation: {result.explanation}")
        
        if result.is_valid and result.issue_code:
            print(f"{Fore.MAGENTA}Issue Code:{Style.RESET_ALL}")
            print(result.issue_code)
            
            if result.fixed_code:
                print(f"{Fore.GREEN}Fixed Code:{Style.RESET_ALL}")
                print(result.fixed_code)
        
        if result.recommendations:
            print(f"{Fore.CYAN}Recommendations:{Style.RESET_ALL}")
            for rec in result.recommendations:
                print(f"  â€¢ {rec}")
    
    def get_valid_vulnerabilities(self) -> List[AnalysisResult]:
        """Get only the valid vulnerabilities from the analysis."""
        return [result for result in self.results if result.is_valid]
    
    def get_invalid_vulnerabilities(self) -> List[AnalysisResult]:
        """Get only the invalid vulnerabilities from the analysis."""
        return [result for result in self.results if not result.is_valid]
    
    def export_results(self, filename: str = "vulnerability_analysis_results.json"):
        """Export analysis results to JSON file."""
        export_data = {
            "total_analyzed": len(self.results),
            "valid_vulnerabilities": len(self.get_valid_vulnerabilities()),
            "invalid_vulnerabilities": len(self.get_invalid_vulnerabilities()),
            "results": [
                {
                    "vulnerability_id": result.vulnerability_id,
                    "is_valid": result.is_valid,
                    "confidence": result.confidence,
                    "explanation": result.explanation,
                    "issue_code": result.issue_code,
                    "fixed_code": result.fixed_code,
                    "recommendations": result.recommendations
                }
                for result in self.results
            ]
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, indent=2, ensure_ascii=False)
        
        print(f"{Fore.GREEN}Results exported to {filename}{Style.RESET_ALL}")
    
    def print_summary(self):
        """Print a summary of the analysis results."""
        valid_count = len(self.get_valid_vulnerabilities())
        invalid_count = len(self.get_invalid_vulnerabilities())
        total_count = len(self.results)
        
        print("\n" + "=" * 60)
        print(f"{Fore.CYAN}ANALYSIS SUMMARY{Style.RESET_ALL}")
        print("=" * 60)
        print(f"Total vulnerabilities analyzed: {total_count}")
        print(f"{Fore.GREEN}Valid vulnerabilities: {valid_count}{Style.RESET_ALL}")
        print(f"{Fore.RED}Invalid vulnerabilities: {invalid_count}{Style.RESET_ALL}")
        
        if total_count > 0:
            accuracy = (invalid_count / total_count) * 100
            print(f"False positive rate: {accuracy:.1f}%")
